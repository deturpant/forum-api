openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/messages:
    put:
      tags:
      - message-controller
      summary: Edit message
      description: Edit message
      operationId: editMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageDto'
      security:
      - Bearer Authentication: []
    post:
      tags:
      - message-controller
      summary: Create message
      description: Create message
      operationId: createMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageDto'
      security:
      - Bearer Authentication: []
    delete:
      tags:
      - message-controller
      summary: Delete message
      description: Delete message
      operationId: deleteMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelMessageRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
      security:
      - Bearer Authentication: []
  /api/users:
    post:
      tags:
      - user-controller
      summary: Registration
      description: Registration
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /api/topics:
    get:
      tags:
      - topic-controller
      summary: Get all available topics
      description: Get all available topics
      operationId: getTopics
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TopicDto'
    post:
      tags:
      - topic-controller
      summary: Create topic with message
      description: Create topic with message
      operationId: createTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TopicDto'
      security:
      - Bearer Authentication: []
  /api/login:
    post:
      tags:
      - user-controller
      summary: User login
      description: User login
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/topics/{topic_id}/messages:
    get:
      tags:
      - message-controller
      summary: Get all messages from topic
      description: Get all messages from topic
      operationId: getMessages
      parameters:
      - name: topic_id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageDto'
components:
  schemas:
    EditMessageRequest:
      type: object
      properties:
        text:
          type: string
        owner_id:
          type: integer
          format: int64
        message_id:
          type: integer
          format: int64
    MessageDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        owner:
          $ref: '#/components/schemas/UserDto'
        created_at:
          type: string
          format: date-time
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        created_at:
          type: string
          format: date-time
    RegRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    TopicRequest:
      type: object
      properties:
        name:
          type: string
        message:
          type: string
        owner_id:
          type: integer
          format: int64
    TopicDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        created_at:
          type: string
          format: date-time
    MessageRequest:
      type: object
      properties:
        message:
          type: string
        topic_id:
          type: integer
          format: int64
        owner_id:
          type: integer
          format: int64
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    DelMessageRequest:
      type: object
      properties:
        owner_id:
          type: integer
          format: int64
        message_id:
          type: integer
          format: int64
  securitySchemes:
    Bearer Authentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
